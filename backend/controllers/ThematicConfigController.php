<?php

namespace backend\controllers;
use backend\models\ThematicActivity;
use Yii;
use yii\base\Exception;
use yii\web\Controller;
use yii\filters\VerbFilter;
use backend\models\ThematicActivityQuery;

/**
 * 配置专题活动首页信息
 */
class ThematicConfigController extends Controller
{
    public $thematic_id = 0;
    public $thematic_config = [];
    public $add_menu = [];
    public $new_content = [];
    public $new_good_modules = [];
    public $new_module = [];
    public $activity = [];
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * 初始化
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        //首先判断有没有id传值
        if(!Yii::$app->request->isAjax){
            if (isset(Yii::$app->request->get()['id'])) {
                $this->thematic_id = Yii::$app->request->get()['id'];
            } else {
                return $this->render('error');
            }

            //获取专题活动基本信息
            $this->activity = Yii::$app->db->createCommand("SELECT id,name FROM thematic_activity WHERE id=:id")
                ->bindValue(":id",$this->thematic_id)
                ->queryOne();

            //获取专题活动的配置信息
            $this->thematic_config = Yii::$app->db->createCommand("SELECT *,count(id) as num  FROM thematic_config WHERE thematic_id=:thematic_id")
                ->bindValue(":thematic_id",$this->thematic_id)
                ->queryOne();
            if(empty($this->thematic_config))
                return $this->render('error');
            else{
                //查询添加的自定义内容模块
                $module_id_content = Yii::$app->db->createCommand("SELECT a.*,b.name,b.content  FROM thematic_module_id as a left join thematic_content as b on a.module_id = b.id WHERE a.module_type = 2 and  a.thematic_id=:thematic_id")
                    ->bindValue(":thematic_id",$this->thematic_id)
                    ->queryAll();
                //查询添加的商品模块
                $module_id_good_modules = Yii::$app->db->createCommand("SELECT a.*,b.name  FROM thematic_module_id as a left join thematic_good_modules as b on a.module_id = b.id WHERE a.module_type = 1 and  a.thematic_id=:thematic_id")
                    ->bindValue(":thematic_id",$this->thematic_id)
                    ->queryAll();

                //如果自定义内容模块不为空 重新组合数组。将原先的id赋值给键值，value是自定义内容的主键、模块的类别、自定义内容名称
                if(!empty($module_id_content)){
                    $this->new_content = null;
                    foreach($module_id_content as $key=>$val){
                        $this->new_content[$val['id']] = [$val["module_id"],$val["module_type"],$val['name']];
                    }
                }
                //如果商品模块不为空 重新组合数组。将原先的id赋值给键值，value是商品模块的主键、模块的类别、商品模块名称
                if(!empty($module_id_good_modules)){
                    $this->new_good_modules = null;
                    foreach($module_id_good_modules as $key=>$val){
                        $this->new_good_modules[$val['id']] = [$val["module_id"],$val["module_type"],$val['name']];
                    }
                }
                $this->new_module = $this->new_content+$this->new_good_modules;
                if(!empty($this->new_module))
                    ksort($this->new_module); //根据数组key值，对数组key进行升序排序
            }
            $this->add_menu = $this->new_module;
        }
    }

    /**
     * 专题活动列表
     */
    public function actionIndex(){
        if(Yii::$app->request->isPost){
            $params = Yii::$app->request->post();
            //判断--如果没有给次专题配置信息，则新增
            if($this->thematic_config['num']==0){
                Yii::$app->db->createCommand("INSERT INTO thematic_config (background_color,button_color,thematic_id) VALUES (:background_color,:button_color,:thematic_id)")
                    ->bindValue(":background_color",$params['background_color'])
                    ->bindValue(":button_color",$params['button_color'])
                    ->bindValue(":thematic_id",$params['thematic_id'])
                    ->execute();
            }
            //否则--则修改配置信息
            else{
                Yii::$app->db->createCommand("UPDATE thematic_config SET background_color=:background_color,button_color=:button_color WHERE thematic_id=:thematic_id")
                    ->bindValue(":background_color",$params['background_color'])
                    ->bindValue(":button_color",$params['button_color'])
                    ->bindValue(":thematic_id",$params['thematic_id'])
                    ->execute();
            }
            Yii::$app->session->setFlash('success', '操作成功');
            return $this->redirect(['index', 'id' => $this->thematic_id]);
        }
        return $this->render('index', [
            'activity' => $this->activity,
            'model' => $this->thematic_config,
            'add_menu' => $this->add_menu,
        ]);
    }

    /**
     * 设置头图模块
     * @return string|\yii\web\Response
     * @throws \yii\db\Exception
     */
    public function actionTitlePic(){
        if(Yii::$app->request->isPost){
            $params = Yii::$app->request->post();
            //判断--如果没有给次专题配置信息，则新增
            if($this->thematic_config['num']==0){
                Yii::$app->db->createCommand("INSERT INTO thematic_config (title_pic,thematic_id) VALUES (:title_pic,:thematic_id)")
                    ->bindValue(":title_pic",$params['pic'])
                    ->bindValue(":thematic_id",$params['thematic_id'])
                    ->execute();
            }
            //否则--则修改配置信息
            else{
                Yii::$app->db->createCommand("UPDATE thematic_config SET title_pic=:title_pic WHERE thematic_id=:thematic_id")
                    ->bindValue(":title_pic",$params['pic'])
                    ->bindValue(":thematic_id",$params['thematic_id'])
                    ->execute();
            }
            Yii::$app->session->setFlash('success', '操作成功');
            return $this->redirect(['title-pic', 'id' => $this->thematic_id]);
        }
        return $this->render('title-pic', [
            'activity' => $this->activity,
            'model' => $this->thematic_config,
            'add_menu' => $this->add_menu,
        ]);
    }

    /**
     * ajax 删除头图模块
     * @throws \yii\db\Exception
     */
    public function actionDelTitlePic(){
        if (Yii::$app->request->isAjax) {
            $thematic_id = Yii::$app->request->post('thematic_id_a');
            if (!isset($thematic_id) || intval($thematic_id)==0) {
                echo -1;
                die;
            }
            echo  Yii::$app->db->createCommand("UPDATE thematic_config SET title_pic=:title_pic WHERE thematic_id=:thematic_id")
                ->bindValue(":title_pic","")
                ->bindValue(":thematic_id",$thematic_id)
                ->execute();
            die;
        }
    }


    /**
     * 添加自定义内容
     * @throws \yii\db\Exception
     */
    public function actionAddContent(){
        if (Yii::$app->request->isAjax) {
            $thematic_id = Yii::$app->request->post('thematic_id');
            $content = Yii::$app->request->post('content');
            if (!isset($thematic_id) || intval($thematic_id)==0) {
                echo -1;
                die;
            }
            $trans = Yii::$app->db->beginTransaction();
            try{
                //添加自定义内容
                Yii::$app->db->createCommand("INSERT INTO thematic_content (thematic_id,name) VALUES (:thematic_id,:name)")
                    ->bindValue(":thematic_id",$thematic_id)
                    ->bindValue(":name",$content)
                    ->execute();
                $content_id = Yii::$app->db->getLastInsertID();
                //将数据添加到和当前专题关联的自定义表中
                Yii::$app->db->createCommand("INSERT INTO thematic_module_id (thematic_id,module_id,module_type) VALUES (:thematic_id,:module_id,:module_type)")
                    ->bindValue(":thematic_id",$thematic_id)
                    ->bindValue(":module_id",$content_id)
                    ->bindValue(":module_type",2)
                    ->execute();

                $trans->commit();
                echo $content_id;
            }
            catch(Exception $e){
                $trans->rollBack();
            }
        }
    }

    public function actionAddGoodsModule(){
        if (Yii::$app->request->isAjax) {
            $thematic_id = Yii::$app->request->post('thematic_id');
            $content = Yii::$app->request->post('content');
            if (!isset($thematic_id) || intval($thematic_id)==0) {
                echo -1;
                die;
            }
            $trans = Yii::$app->db->beginTransaction();
            try{
                //添加自定义商品模块
                Yii::$app->db->createCommand("INSERT INTO thematic_good_modules (thematic_id,name) VALUES (:thematic_id,:name)")
                    ->bindValue(":thematic_id",$thematic_id)
                    ->bindValue(":name",$content)
                    ->execute();
                $goods_module_id = Yii::$app->db->getLastInsertID();
                //将数据添加到和当前专题关联的自定义表中
                Yii::$app->db->createCommand("INSERT INTO thematic_module_id (thematic_id,module_id,module_type) VALUES (:thematic_id,:module_id,:module_type)")
                    ->bindValue(":thematic_id",$thematic_id)
                    ->bindValue(":module_id",$goods_module_id)
                    ->bindValue(":module_type",1)
                    ->execute();

                $trans->commit();
                echo $goods_module_id;
            }
            catch(Exception $e){
                $trans->rollBack();
            }
        }
    }

    /**
     * 自定义内容
     * @return string|\yii\web\Response
     * @throws \yii\db\Exception
     */
    public function actionContent(){
        //首先判断有没有id传值
        if (isset(Yii::$app->request->get()['mid'])) {
            $module_id = Yii::$app->request->get()['mid'];
        } else {
            return $this->render('error');
        }
        //获取自定义内容的信息
        $content = Yii::$app->db->createCommand("SELECT * FROM thematic_content WHERE id=:id")
            ->bindValue(":id",$module_id)
            ->queryOne();
        if(Yii::$app->request->isPost){
            $params = Yii::$app->request->post();
            $trans = Yii::$app->db->beginTransaction();
            try{
                //修改自定义内容
                Yii::$app->db->createCommand("UPDATE thematic_content SET content = :content WHERE thematic_id=:thematic_id AND id=:id")
                    ->bindValue(":content",$params['content'])
                    ->bindValue(":thematic_id",$params['thematic_id'])
                    ->bindValue(":id",$params['module_id'])
                    ->execute();
                $trans->commit();
                Yii::$app->session->setFlash('success', '操作成功');
                return $this->redirect(['content', 'id' => $this->thematic_id,'mid'=>$params['module_id']]);
            }
            catch(Exception $e){
                $trans->rollBack();
                Yii::$app->session->setFlash('error', '操作失败');
            }
        }
        return $this->render('content', [
            'activity' => $this->activity,
            'model' => $this->thematic_config,
            'add_menu' => $this->add_menu,
            'content' =>$content,
        ]);
    }

    /**
     * 预定记录
     * @return string|\yii\web\Response
     * @throws \yii\db\Exception
     */
    public function actionBookLog(){
        if(Yii::$app->request->isPost){
            $params = Yii::$app->request->post();
            //判断--如果没有给次专题配置信息，则新增
            if($this->thematic_config==0){
                Yii::$app->db->createCommand("INSERT INTO thematic_config (is_reservation,thematic_id) VALUES (:is_reservation,:thematic_id)")
                    ->bindValue(":is_reservation",$params['book'])
                    ->bindValue(":thematic_id",$params['thematic_id'])
                    ->execute();
            }
            //否则--则修改配置信息
            else{
                Yii::$app->db->createCommand("UPDATE thematic_config SET is_reservation=:is_reservation WHERE thematic_id=:thematic_id")
                    ->bindValue(":is_reservation",$params['book'])
                    ->bindValue(":thematic_id",$params['thematic_id'])
                    ->execute();
            }
            Yii::$app->session->setFlash('success', '操作成功');
            return $this->redirect(['book-log', 'id' => $this->thematic_id]);
        }
        return $this->render('book-log', [
            'activity' => $this->activity,
            'model' => $this->thematic_config,
            'add_menu' => $this->add_menu,
        ]);
    }

    /**
     * 配置商品模块
     * @return string|\yii\web\Response
     */
    public function actionGoods(){
        //首先判断有没有id传值
        if (isset(Yii::$app->request->get()['mid'])) {
            $module_id = Yii::$app->request->get()['mid'];
        } else {
            return $this->render('error');
        }
        $module_type = isset(Yii::$app->request->get()['module_type']) ? Yii::$app->request->get()['module_type'] : 1;

        //获取当前商品模块的商品信息
        //1----active
        $goods_active = Yii::$app->db->createCommand("SELECT g.id,g.sort,g.type,a.id as goods_id,a.name as goods_name,a.title_pic,a.status,(SELECT price FROM travel_activity_date_price WHERE  `date`>NOW() AND STATUS=1 AND stock>0 and activity_id = a.id LIMIT 1) AS price FROM thematic_good as g left join travel_activity AS a on g.good_id = a.id WHERE g.type = 1 and g.module_id = :module_id and g.module_type = :module_type order by g.sort desc")
            ->bindValue(":module_id",$module_id)
            ->bindValue(":module_type",$module_type)
            ->queryAll();
        //如果active不为空，根据获取的id重新组成数组，将val的id作为新数组的key
        $new_active = [];
        if(!empty($goods_active)){
            foreach($goods_active as $key=>$val){
                $new_active[$val['sort']] = [
                    'goods_id' => $val['goods_id'],
                    'goods_name' => $val['goods_name'],
                    'title_pic' => $val['title_pic'] !="" ? explode(",",$val['title_pic'])[0] : "",
                    'price' => $val['price'],
                    'sort' =>$val['sort'],
                    'type' =>$val['type'],
                    'status' => $val['status'],
                ];
            }
        }
        //2-----higo
        $goods_higo = Yii::$app->db->createCommand("SELECT g.id,g.sort,g.type,h.id as goods_id,h.name as goods_name,h.title_pic,h.status,(SELECT adult_price FROM travel_higo_date_price WHERE  `date`>NOW() AND STATUS=1 AND stock>0 and date>date_add(now(), INTERVAL h.close_day day)  and higo_id = h.id LIMIT 1) AS price FROM thematic_good as g left join travel_higo AS h ON g.good_id = h.id where g.type=2 and g.module_id = :module_id and g.module_type = :module_type order by g.sort desc")
            ->bindValue(":module_id",$module_id)
            ->bindValue(":module_type",$module_type)
            ->queryAll();
        //如果higo不为空，根据获取的id重新组成数组，将val的id作为新数组的key
        $new_higo = [];
        if(!empty($goods_higo)){
            foreach($goods_higo as $key=>$val){
                $new_higo[$val['sort']] = [
                    'goods_id' => $val['goods_id'],
                    'goods_name' => $val['goods_name'],
                    'title_pic' => $val['title_pic'] !="" ? explode(",",$val['title_pic'])[0] : "",
                    'price' => $val['price'],
                    'sort' =>$val['sort'],
                    'type' =>$val['type'],
                    'status' => $val['status'],
                ];
            }
        }
        $new_goods = $new_active+$new_higo;
        if(!empty($new_goods)){
            krsort($new_goods);

        }

        if($module_type==1){
            //查询商品模块的信息
            $goods_module = Yii::$app->db->createCommand("select * from thematic_good_modules where id = :id")
                ->bindValue(":id",$module_id)
                ->queryOne();
        }
        if($module_type==2){
            //查询商品模块的信息
            $goods_module = Yii::$app->db->createCommand("select * from thematic_goods_category where id = :id")
                ->bindValue(":id",$module_id)
                ->queryOne();
        }
        //dump($goods_module);exit;
        return $this->render('goods', [
            'activity' => $this->activity,
            'model' => $this->thematic_config,
            'add_menu' => $this->add_menu,
            'new_goods' => $new_goods,
            'module_id' => $module_id,
            'goods_module' => $goods_module,
            'module_type' => $module_type,
        ]);
    }

    /**
     * 添加线路或者活动
     * @return string|\yii\web\Response
     * @throws \yii\db\Exception
     */
    public function actionAddGoods(){

        //首先判断有没有id传值
        if (isset(Yii::$app->request->get()['mid']) && isset(Yii::$app->request->get()['module_type'])) {
            $module_id = Yii::$app->request->get()['mid'];
            $module_type = Yii::$app->request->get()['module_type'];
        } else {
            return $this->render('error');
        }
        if(Yii::$app->request->isPost){
            $params = Yii::$app->request->post();
            //查询当前要添加的线路或者活动有没有被添加过
            $goods = Yii::$app->db->createCommand("select * from thematic_good where module_id = :module_id and module_type = :module_type and type=:type and good_id=:good_id")
                ->bindValue(":module_id",$module_id)
                ->bindValue(":module_type",$module_type)
                ->bindValue(":type",$params['goods_type'])
                ->bindValue(":good_id",$params['goods_id'])
                ->queryAll();
            if(!empty($goods)){
                Yii::$app->session->setFlash('had', '当前模块已添加过此产品，请重新选择添加！');
                return $this->redirect(['add-goods', 'id' => $this->thematic_id,'mid'=>$module_id,'module_type'=>$module_type]);
            }

            //查询当前商品模块下的所有商品的最大排序值
            $maxSort = Yii::$app->db->createCommand("select sort from thematic_good where module_id = :module_id and module_type = :module_type order by sort desc limit 1")
                ->bindValue(":module_id",$module_id)
                ->bindValue(":module_type",$module_type)
                ->queryOne();
            $res = Yii::$app->db->createCommand("insert into thematic_good(good_id,type,module_id,module_type,sort) VALUES (:good_id,:type,:module_id,:module_type,:sort)")
                ->bindValue(":good_id",$params['goods_id'])
                ->bindValue(":type",$params['goods_type'])
                ->bindValue(":module_id",$module_id)
                ->bindValue(":module_type",$module_type)
                ->bindValue(":sort",$maxSort['sort']+1)
                ->execute();
            if($res==1){
//                Yii::$app->session->setFlash('success', '操作成功');
                return $this->redirect(['goods', 'id' => $this->thematic_id,'mid'=>$module_id,'module_type'=>$module_type]);
            }
            else{
                Yii::$app->session->setFlash('success', '操作失败');
                return $this->redirect(['add-goods', 'id' => $this->thematic_id,'mid'=>$module_id,'module_type'=>$module_type]);
            }
        }else{
//            if(Yii::$app->session->hasFlash('success')){
//                return $this->redirect(['goods', 'id' => $this->thematic_id,'mid'=>$module_id,'module_type'=>$module_type]);
//            }
            $goods_module = [];
            if($module_type==2){
                //查询商品模块的信息
                $goods_module = Yii::$app->db->createCommand("select * from thematic_goods_category where id = :id")
                    ->bindValue(":id",$module_id)
                    ->queryOne();
            }
            return $this->render('add-goods', [
                'activity' => $this->activity,
                'model' => $this->thematic_config,
                'add_menu' => $this->add_menu,
                'goods_module' => $goods_module,
                'module_type' => $module_type,
            ]);
        }

    }

    /**
     * 根据搜索条件获取线路或者活动列表
     * @return null|string
     */
    public function actionGetGoodsInfo(){
        if (Yii::$app->request->isAjax) {
            $name = Yii::$app->request->get('name');
            $type = Yii::$app->request->get('type');
            //根据type查询相应的活动路线
            //type==1查询当地活动
            if($type==1){
                $res = Yii::$app->db->createCommand("select a.id,a.name from travel_activity as a where a.status != -1 and  a.name like '%".trim($name)."%' or a.id='".trim($name)."'")
                    ->queryAll();
            }
            if($type==2){
                $res = Yii::$app->db->createCommand("select h.id,h.name from travel_higo as h where h.status != -1 and  h.name like '%".trim($name)."%' or h.id='".trim($name)."'")
                    ->queryAll();
            }
            if(!empty($res))
                return json_encode($res);
            else
                return null;
        }
    }

    /**
     * 获取线路活当地活动的详细信息
     * @return null|string
     */
    public function actionGetOneGoodsInfo(){
        if (Yii::$app->request->isAjax) {
            $id = Yii::$app->request->get('id');
            $type = Yii::$app->request->get('type');
            //根据type查询相应的活动路线
            //type==1查询当地活动
            if($type==1){
                $res = Yii::$app->db->createCommand("select a.id,a.name,a.title_pic,(SELECT price FROM travel_activity_date_price WHERE  UNIX_TIMESTAMP(DATE)>UNIX_TIMESTAMP() AND STATUS=1 AND stock>0 and activity_id = a.id LIMIT 1) AS price from travel_activity as a where a.id=:id")
                    ->bindValue(":id",$id)
                    ->queryOne();
            }
            if($type==2){
                $res = Yii::$app->db->createCommand("select h.id,h.name,h.title_pic,(SELECT adult_price FROM travel_higo_date_price WHERE  UNIX_TIMESTAMP(DATE)>UNIX_TIMESTAMP() AND STATUS=1 AND stock>0 and date>date_add(now(), INTERVAL h.close_day day)  and higo_id = h.id LIMIT 1) AS price from travel_higo as h where  h.id=:id")
                    ->bindValue(":id",$id)
                    ->queryOne();
            }
            if(!empty($res)){
                $res['title_pic'] = $res['title_pic'] !="" ? explode(",",$res['title_pic'])[0] : "";
                return json_encode($res);
            }
            else
                return null;
        }
    }

    /**
     * 修改商品模块每个商品的显示顺序
     * @return int
     * @throws \yii\db\Exception
     */
    public function actionUpdateGoodsSort(){
        $mid = Yii::$app->request->get()['mid'];
        $module_type = Yii::$app->request->get()['module_type'];
        if(intval($mid)==0 || intval($module_type)==0){
            echo -1;
        }
        if (Yii::$app->request->isAjax) {
            $goods_id = Yii::$app->request->post('goods_id');
            $goods_id_pre = Yii::$app->request->post('goods_id_pre');
            $sort = Yii::$app->request->post('sort');
            $sort_pre = Yii::$app->request->post('sort_pre');
            if(intval($goods_id) == 0 || intval($goods_id_pre) == 0 || intval($sort) == 0 || intval($sort_pre) == 0){
                echo -1;
            }
            $trans = Yii::$app->db->beginTransaction();
            try{
                //修改当前的商品排序
                $res1 = Yii::$app->db->createCommand("update thematic_good set sort=:sort where good_id = :good_id and module_id = :module_id and module_type=:module_type")
                    ->bindValue(":sort",$sort_pre)
                    ->bindValue(":good_id",$goods_id)
                    ->bindValue(":module_id",$mid)
                    ->bindValue(":module_type",$module_type)
                    ->execute();
                //修改当前商品的前一个的排序
                $res2 = Yii::$app->db->createCommand("update thematic_good set sort=:sort where good_id = :good_id and module_id = :module_id and module_type=:module_type")
                    ->bindValue(":sort",$sort)
                    ->bindValue(":good_id",$goods_id_pre)
                    ->bindValue(":module_id",$mid)
                    ->bindValue(":module_type",$module_type)
                    ->execute();
                $trans->commit();
                return $res1;
            }
            catch(Exception $e){
                $trans->rollBack();
            }
        }
    }

    /**
     * 删除商品模块的商品
     */
    public function actionDelGoods(){
        $mid = Yii::$app->request->get()['mid'];
        $module_type = Yii::$app->request->get()['module_type'];
        if(intval($mid)==0 || intval($module_type)==0){
            echo -1;
        }
        if (Yii::$app->request->isAjax) {
            $goods_id = Yii::$app->request->post('goods_id');
            if($goods_id == null){
                echo -1;
            }
            $goods_id_str = implode(",",$goods_id);
            $res = Yii::$app->db->createCommand("delete from thematic_good where  good_id in (".$goods_id_str.") and module_id = :module_id and module_type=:module_type")
                ->bindValue(":module_id",$mid)
                ->bindValue(":module_type",$module_type)
                ->execute();
            echo $res;
        }
    }

    /**
     * 修改商品模块中的商品信息
     * @return string|\yii\web\Response
     * @throws \yii\db\Exception
     */
    public function actionUpdateGoods(){
        if (isset(Yii::$app->request->get()['mid']) && isset(Yii::$app->request->get()['goods_id']) && isset(Yii::$app->request->get()['type']) && isset(Yii::$app->request->get()['module_type'])) {
            $module_id = Yii::$app->request->get()['mid'];
            $goods_id = Yii::$app->request->get()['goods_id'];
            $type = Yii::$app->request->get()['type'];
            $module_type = Yii::$app->request->get()['module_type'];
        } else {
            return $this->render('error');
        }
        if(Yii::$app->request->isPost){
            $params = Yii::$app->request->post();
            $res = Yii::$app->db->createCommand("update thematic_good set good_id=:new_good_id,type=:new_type where module_id=:module_id and module_type=:module_type and good_id=:good_id and type=:type")
                ->bindValue(":new_good_id",$params['goods_id'])
                ->bindValue(":new_type",$params['goods_type'])
                ->bindValue(":module_id",$module_id)
                ->bindValue(":module_type",$module_type)
                ->bindValue(":good_id",$goods_id)
                ->bindValue(":type",$type)
                ->execute();
            if($res==1){
                Yii::$app->session->setFlash('success', '操作成功');
                if($module_type==1)
                    return $this->redirect(['goods', 'id' => $this->thematic_id,'mid'=>$module_id]);
                if($module_type==2)
                    return $this->redirect(['goods', 'id' => $this->thematic_id,'mid'=>$module_id,'module_type'=>$module_type]);
            }
        }
        //根据type分别查询当地活动或者主题线路  type==1 当地活动 type==2 主题线路
        if($type==1){
            $goods_info = Yii::$app->db->createCommand("select a.id,a.name,a.title_pic,(SELECT price FROM travel_activity_date_price WHERE  UNIX_TIMESTAMP(DATE)>UNIX_TIMESTAMP() AND STATUS=1 AND stock>0 and activity_id = a.id LIMIT 1) AS price from travel_activity as a where a.id=:id")
                ->bindValue(":id",$goods_id)
                ->queryOne();
        }
        if($type==2){
            $goods_info = Yii::$app->db->createCommand("select h.id,h.name,h.title_pic,(SELECT adult_price FROM travel_higo_date_price WHERE  UNIX_TIMESTAMP(DATE)>UNIX_TIMESTAMP() AND STATUS=1 AND stock>0 and date>date_add(now(), INTERVAL h.close_day day)  and higo_id = h.id LIMIT 1) AS price from travel_higo as h where  h.id=:id")
                ->bindValue(":id",$goods_id)
                ->queryOne();
        }
        if(!empty($goods_info)){
            $goods_info['title_pic'] = $goods_info['title_pic'] !="" ? explode(",",$goods_info['title_pic'])[0] : "";
        }
        $goods_module = [];
        if($module_type==2){
            //查询商品模块的信息
            $goods_module = Yii::$app->db->createCommand("select * from thematic_goods_category where id = :id")
                ->bindValue(":id",$module_id)
                ->queryOne();
        }
        return $this->render('update-goods', [
            'activity' => $this->activity,
            'model' => $this->thematic_config,
            'add_menu' => $this->add_menu,
            'goods_info' => $goods_info,
            'module_type' => $module_type,
            'goods_module' => $goods_module,
        ]);
    }

    /**
     * 查看商品模块中的商品信息
     * @return string
     */
    public function actionViewGoods(){
        if (isset(Yii::$app->request->get()['mid']) && isset(Yii::$app->request->get()['goods_id']) && isset(Yii::$app->request->get()['type']) && isset(Yii::$app->request->get()['module_type'])) {
            $module_id = Yii::$app->request->get()['mid'];
            $goods_id = Yii::$app->request->get()['goods_id'];
            $type = Yii::$app->request->get()['type'];
            $module_type = Yii::$app->request->get()['module_type'];
        } else {
            return $this->render('error');
        }
        //根据type分别查询当地活动或者主题线路  type==1 当地活动 type==2 主题线路
        if($type==1){
            $goods_info = Yii::$app->db->createCommand("select a.id,a.name,a.title_pic,(SELECT price FROM travel_activity_date_price WHERE  UNIX_TIMESTAMP(DATE)>UNIX_TIMESTAMP() AND STATUS=1 AND stock>0 and activity_id = a.id LIMIT 1) AS price from travel_activity as a where a.id=:id")
                ->bindValue(":id",$goods_id)
                ->queryOne();
        }
        if($type==2){
            $goods_info = Yii::$app->db->createCommand("select h.id,h.name,h.title_pic,(SELECT adult_price FROM travel_higo_date_price WHERE  UNIX_TIMESTAMP(DATE)>UNIX_TIMESTAMP() AND STATUS=1 AND stock>0 and date>date_add(now(), INTERVAL h.close_day day)  and higo_id = h.id LIMIT 1) AS price from travel_higo as h where  h.id=:id")
                ->bindValue(":id",$goods_id)
                ->queryOne();
        }
        if(!empty($goods_info)){
            $goods_info['title_pic'] = $goods_info['title_pic'] !="" ? explode(",",$goods_info['title_pic'])[0] : "";
        }
        $goods_module = [];
        if($module_type==2){
            //查询商品模块的信息
            $goods_module = Yii::$app->db->createCommand("select * from thematic_goods_category where id = :id")
                ->bindValue(":id",$module_id)
                ->queryOne();
        }
        //dump($goods_module);exit;
        return $this->render('view-goods', [
            'activity' => $this->activity,
            'model' => $this->thematic_config,
            'add_menu' => $this->add_menu,
            'goods_info' => $goods_info,
            'type' => $type,
            'module_type' => $module_type,
            'goods_module' => $goods_module,
        ]);
    }


    /**
     * 删除商品模块的商品
     */
    public function actionDelModule(){
        $id = Yii::$app->request->get()['id'];
        if(intval($id)==0){
            echo -1;
        }
        if (Yii::$app->request->isAjax) {
            $mid = Yii::$app->request->get()['mid'];
            $key = Yii::$app->request->get()['key'];
            $type = Yii::$app->request->get()['type'];
            if(intval($mid) || intval($key)==0 || intval($type)==0){
                echo -1;
            }
            $trans = Yii::$app->db->beginTransaction();
            try{
                //删除module_id的信息
                $res = Yii::$app->db->createCommand("delete from thematic_module_id where thematic_id=:thematic_id and module_id=:module_id and module_type = :module_type and id=:id")
                    ->bindValue(":thematic_id",$id)
                    ->bindValue(":module_id",$mid)
                    ->bindValue(":module_type",$type)
                    ->bindValue(":id",$key)
                    ->execute();
                //type==1 商品模块  type==2 自定义内容模块
                if($type==1){
                    //删除商品模块主表信息
                    $res = Yii::$app->db->createCommand("delete from thematic_good_modules where thematic_id=:thematic_id and id=:id")
                        ->bindValue(":thematic_id",$id)
                        ->bindValue(":id",$mid)
                        ->execute();
                    //删除商品模块副表信息
                    $res = Yii::$app->db->createCommand("delete from thematic_good where module_id=:module_id and module_type=1")
                        ->bindValue(":module_id",$mid)
                        ->execute();
                }
                if($type==2){
                    //删除自定义内容信息
                    $res = Yii::$app->db->createCommand("delete from thematic_content where thematic_id=:thematic_id and id=:id")
                        ->bindValue(":thematic_id",$id)
                        ->bindValue(":id",$mid)
                        ->execute();
                }
                $trans->commit();
                echo $res;
            }
            catch(Exception $e){
                $trans->rollBack();
            }
        }
    }

    /**
     * 商品分类模块
     * @return string|\yii\web\Response
     */
    public function actionGoodsCat(){
        if(Yii::$app->request->isPost){
            $params = Yii::$app->request->post();

            Yii::$app->session->setFlash('success', '操作成功');
            return $this->redirect(['book-log', 'id' => $this->thematic_id]);
        }

        //查询当前活动的所有商品分类
        $goods_cat = Yii::$app->db->createCommand("select c.id,c.category_name,c.sort,(select count(id ) from thematic_good where module_type = 2 and module_id = c.id) as num from thematic_goods_category as c  where c.thematic_id = :thematic_id order by sort")
            ->bindValue(":thematic_id",$this->thematic_id)
            ->queryAll();

        //echo count($goods_cat);exit;

        //dump($new_goods);exit;
        return $this->render('goods-cat', [
            'activity' => $this->activity,
            'model' => $this->thematic_config,
            'add_menu' => $this->add_menu,
            'goods_cat' => $goods_cat,
        ]);
    }

    /**
     * 修改商品分类的排序顺序
     * @return int
     * @throws \yii\db\Exception
     */
    public function actionUpdateGoodsCatSort(){
       if (Yii::$app->request->isAjax) {
            $goods_id = Yii::$app->request->post('goods_id');
            $goods_id_pre = Yii::$app->request->post('goods_id_pre');
            $sort = Yii::$app->request->post('sort');
            $sort_pre = Yii::$app->request->post('sort_pre');
            if(intval($goods_id) == 0 || intval($goods_id_pre) == 0 || intval($sort) == 0 || intval($sort_pre) == 0){
                echo -1;
            }
            $trans = Yii::$app->db->beginTransaction();
            try{
                //修改当前的商品分类排序
                $res1 = Yii::$app->db->createCommand("update thematic_goods_category set sort=:sort where id = :id")
                    ->bindValue(":sort",$sort_pre)
                    ->bindValue(":id",$goods_id)
                    ->execute();
                //修改当前商品分类的前一个的排序
                $res2 = Yii::$app->db->createCommand("update thematic_goods_category set sort=:sort where id = :id")
                    ->bindValue(":sort",$sort)
                    ->bindValue(":id",$goods_id_pre)
                    ->execute();
                $trans->commit();
                return $res1;
            }
            catch(Exception $e){
                $trans->rollBack();
            }
        }
    }

    /**
     * 删除商品分类模块的商品
     */
    public function actionDelGoodsCat(){
        if (Yii::$app->request->isAjax) {
            $goods_id = Yii::$app->request->post('goods_id');
            if($goods_id == null){
                echo -1;
            }
            $goods_id_str = implode(",",array_filter($goods_id));
            $trans = Yii::$app->db->beginTransaction();
            try{
                $res = Yii::$app->db->createCommand("delete from thematic_goods_category where id in (".$goods_id_str.")")->execute();
                $res = Yii::$app->db->createCommand("delete from thematic_good where  module_id in (".$goods_id_str.") and module_type=2")
                    ->execute();
                $trans->commit();
                echo 1;
            }
            catch(Exception $e){
                $trans->rollBack();
            }

        }
    }
    /**
     * 添加商品分类模块
     */
    public function actionSaveGoodsCat(){
        $id = Yii::$app->request->get()['id'];
        if(intval($id)==0){
            echo -1;
        }
        if (Yii::$app->request->isAjax) {
            $name = Yii::$app->request->post()['name'];
            $goods_id = Yii::$app->request->post()['goods_id'];
            if($name == ""){
                echo -1;
            }
            $trans = Yii::$app->db->beginTransaction();
            try{
                if($goods_id=="0"){
                    //查询当前商品模块下的所有商品的最大排序值
                    $maxSort = Yii::$app->db->createCommand("select sort from thematic_goods_category where thematic_id = :thematic_id order by sort desc limit 1")
                        ->bindValue(":thematic_id",$id)
                        ->queryOne();
                    Yii::$app->db->createCommand("insert into thematic_goods_category(thematic_id,category_name,sort) VALUES (:thematic_id,:category_name,:sort)")
                        ->bindValue(":thematic_id",$id)
                        ->bindValue(":category_name",$name)
                        ->bindValue(":sort",$maxSort['sort']+1)
                        ->execute();
                    $res = ['id'=>Yii::$app->db->getLastInsertID(),'sort'=>$maxSort['sort']+1,'type'=>'add'];
                }
                else{
                    Yii::$app->db->createCommand("update thematic_goods_category set category_name = :category_name where id=:id")
                        ->bindValue(":category_name",$name)
                        ->bindValue(":id",$goods_id)
                        ->execute();
                    $res = ['id'=>Yii::$app->db->getLastInsertID(),'type'=>'update'];
                }
                $trans->commit();
                return json_encode($res);
            }
            catch(Exception $e){
                $trans->rollBack();
            }
        }
    }

    /**
     * 预定记录
     * @return string|\yii\web\Response
     * @throws \yii\db\Exception
     */
    public function actionView(){
        //获取专题活动基本信息
        $activity = Yii::$app->db->createCommand("SELECT * FROM thematic_activity WHERE id=:id")
            ->bindValue(":id",$this->thematic_id)
            ->queryOne();
        if(Yii::$app->request->isPost){
            $params = Yii::$app->request->post();
            $start_time = strtotime($activity['start_time']);
            $end_time = strtotime($activity['end_time']);
            $now_time = time();
            $status = 3;
            //判断当前时间是否在此活动的开始时间和结束时间之间，如果是的话，活动默认为上线状态，否则为下线状态
            if($now_time<$start_time)
                $status = 3; //如果当前时间小于专题活动开始的时间，则专题活动默认为未开始的状态
            elseif($now_time>$end_time)
                $status = 4; //如果当前时间大于专题活动结束的时间，则专题活动默认为已到期的状态
            elseif($now_time >= $start_time && $now_time<=$end_time)
                $status = 1; //如果当前时间大于等于专题活动开始时间并且小于等于专题活动结束时间，则专题活动默认为一上线的状态
            //修改时间
            $update_time = date("Y-m-d H:i:s",time());
            $res = Yii::$app->db->createCommand("update thematic_activity set status = :status,update_time = :update_time,publish_status=:publish_status where id = :id")
                ->bindValue(":status",$status)
                ->bindValue(":update_time",$update_time)
                ->bindValue(":id",$params['thematic_id'])
                ->bindValue(":publish_status",1)
                ->execute();
            if($res>=0){
                Yii::$app->session->setFlash('success', '成功发布');
                return $this->redirect(['view', 'id' => $this->thematic_id]);
            }
        }
        return $this->render('view', [
            'activity' => $activity,
            'model' => $this->thematic_config,
            'add_menu' => $this->add_menu,
        ]);
    }



}
